"""
Доработаем задачи 5-6. Создайте класс-фабрику.
Класс принимает тип животного (название одного из созданных классов) и параметры для этого типа.
Внутри класса создайте экземпляр на основе переданного типа и верните его из класса-фабрики.
"""

class Animal:
    def __init__(self, name: str, weight: int, age: int):
        self.name = name
        self.weight = weight
        self.age = age

    def move(self):
        pass

    def say(self):
        pass

    def __str__(self):
        return f'{self.name} {self.weight} {self.age}'


class Bird(Animal):
    def __init__(self, name: str, weight: int, age: int, bird_type: str, sound: str):
        super().__init__(name, weight, age)
        self.bird_type = bird_type
        self._sound = sound

    def move(self):
        return 'Fly'

    def say(self):
        return self._sound

    def __str__(self):
        return f'{super().__str__()} {self.bird_type}'


class Dog(Animal):
    def __init__(self, name: str, weight: int, age: int, dog_type: str):
        super().__init__(name, weight, age)
        self.dog_type = dog_type

    def move(self):
        return 'Run'

    def say(self):
        return "Gov"

    def __str__(self):
        return f'{super().__str__()} {self.dog_type}'


class Fish(Animal):
    def __init__(self, name: str, weight: int, age: int, fish_type: str):
        super().__init__(name, weight, age)
        self.fish_type = fish_type

    def move(self):
        return 'Swim'

    def __str__(self):
        return f'{super().__str__()}{self.fish_type}'


class AnimalFactory:
    @staticmethod
    def create_animal(animal_type, name, weight, age, extra_params=None):
        if animal_type == "Bird":
            sound = extra_params.get("sound", "")
            bird_type = extra_params.get("bird_type", "")
            return Bird(name, weight, age, bird_type, sound)
        elif animal_type == "Dog":
            dog_type = extra_params.get("dog_type", "")
            return Dog(name, weight, age, dog_type)
        elif animal_type == "Fish":
            fish_type = extra_params.get("fish_type", "")
            return Fish(name, weight, age, fish_type)
        else:
            raise ValueError(f"Invalid animal type: {animal_type}")


if __name__ == '__main__':
    factory = AnimalFactory()

    dog = factory.create_animal("Dog", "Рэкс", 40, 5, {"dog_type": "Такса"})
    bird = factory.create_animal("Bird", "Гоша", 1, 3, {"sound": "Чирик", "bird_type": "Попугай"})
    fish = factory.create_animal("Fish", "Карп", 10, 5, {"fish_type": " Речной"})

    print(dog)
    print(bird)
    print(fish)



# Возьмите 1-3 любые задачи из прошлых семинаров (например сериализация данных), которые вы уже решали. 
# Превратите функции в методы класса, а параметры в свойства. Задачи должны решаться через вызов методов экземпляра.

"""
 Напишите функцию, которая принимает строку текста.
Вывести функцией каждое слово с новой строки.
✔ Строки нумеруются начиная с единицы.
✔ Слова выводятся отсортированными согласно кодировки Unicode.
✔ Текст выравнивается по правому краю так, чтобы у самого
длинного слова был один пробел между ним и номером строки.
"""

# def task1(inp: str) -> None:
#     text_list = inp.split()
#     text_list.sort()
#     max_lenght = len(max(text_list, key = len))
#     for number, item in enumerate(text_list, start = 1):
#         print(f'{number} {item:>{max_lenght}}')
#
# task1('adsad asdasd as dasd das das')

class TextManipulator:
    def __init__(self, inp):
        self._input = inp

    def task1(self):
        text_list = self._input.split()
        text_list.sort()
        max_length = len(max(text_list, key=len))
        for number, item in enumerate(text_list, start=1):
            print(f'{number} {item:>{max_length}}')


input_text = "apple orange banana"
manipulator = TextManipulator(input_text)
manipulator.task1()

"""
Напишите функцию, которая принимает строку текста.
✔ Сформируйте список с уникальными кодами Unicode каждого
символа введённой строки отсортированный по убыванию.

"""
# def task2(inp: str) -> list[int]:
#     result = set()
#     for i in inp:
#         result.add(ord(i))
#     return sorted(result, reverse=True)
#
# print(task2('adsfds fdsfds dsaf'))

class TextManipulator:
    def __init__(self, inp):
        self._input = inp

    def task2(self):
        result = set()
        for i in self._input:
            result.add(ord(i))
        return sorted(result, reverse=True)


input_text = "adsfds fdsfds dsaf"
manipulator = TextManipulator(input_text)
result = manipulator.task2()
print(result)

"""
✔ Функция получает на вход строку из двух чисел через пробел.
✔ Сформируйте словарь, где ключом будет
символ из Unicode, а значением — целое число.
✔ Диапазон пар ключ-значение от наименьшего из введённых
пользователем чисел до наибольшего включительно
"""

# def task3(inp: str) -> dict[int: int]:
#     num1, num2 = tuple(map(int, inp.split()))
#     min_number = min(num1, num2)
#     max_number = max(num1, num2)
#     result = dict()
#     for i in range(min_number, max_number + 1):
#         result.update({chr(i): i})
#     return result
#
# print(task3('10 99'))

class NumberManipulator:
    def __init__(self, inp):
        self._input = inp

    def task3(self):
        num1, num2 = tuple(map(int, self._input.split()))
        min_number = min(num1, num2)
        max_number = max(num1, num2)
        result = {}
        for i in range(min_number, max_number + 1):
            result[chr(i)] = i
        return result


input_numbers = "10 99"
manipulator = NumberManipulator(input_numbers)
result = manipulator.task3()
print(result)

