# Дан список повторяющихся элементов. Вернуть список с дублирующимися элементами. В результирующем списке не должно быть дубликатов.

lst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]

result = []
for elem in lst:
    if elem not in result:
        result.append(elem)

print(result)


# В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых. Не учитывать знаки препинания и регистр символов. 
# За основу возьмите любую статью из википедии или из документации к языку.

import string

text = """
Python is an interpreted high-level programming language for general-purpose programming. 
Created by Guido van Rossum and first released in 1991, 
Python 's design philosophy emphasizes code readability with its notable use of significant whitespace. 
Its language constructs and object-oriented approach aim to help programmers write clear, 
logical code for small and large-scale projects.
"""

# Удаление знаков препинания и приведение к нижнему регистру
text = text.translate(str.maketrans("", "", string.punctuation)).lower()

# Разбиение строки на слова
words = text.split()

# Подсчет количества встречаемых слов с помощью словаря
word_count = {}
for word in words:
    if word in word_count:
        word_count[word] += 1
    else:
        word_count[word] = 1

# Сортировка словаря по значениям и вывод 10 самых частых слов
most_common = sorted(word_count.items(), key=lambda x: x[1], reverse=True)[:10]
for word, count in most_common:
    print(word, count)
    

# Создайте словарь со списком вещей для похода в качестве ключа и их массой в качестве значения.
# Определите какие вещи влезут в рюкзак передав его максимальную грузоподъёмность. 
# Достаточно вернуть один допустимый вариант. 
# *Верните все возможные варианты комплектации рюкзака.

items = {
    'water': 3,
    'food': 5,
    'tent': 10,
    'sleeping bag': 7,
    'first aid kit': 2
}

max_weight = 15

# Создание таблицы для решения задачи о рюкзаке
table = [[0 for _ in range(max_weight + 1)] for _ in range(len(items) + 1)]

for i, (item, weight) in enumerate(items.items(), start=1):
    for j in range(1, max_weight + 1):
        if weight > j:
            table[i][j] = table[i-1][j]
        else:
            table[i][j] = max(table[i-1][j], table[i-1][j-weight] + weight)

# Определение вещей, которые влезут в рюкзак
backpack = []
i, j = len(items), max_weight
while i > 0 and j > 0:
    if table[i][j] != table[i-1][j]:
        item, weight = list(items.items())[i-1]
        backpack.append(item)
        j -= weight
    i -= 1

backpack.reverse()
print(backpack)


"""""
Чтобы вернуть все возможные варианты комплектации рюкзака, мы можем использовать рекурсивную функцию. 
Каждый раз, когда мы добавляем вещь в рюкзак, мы вызываем функцию с оставшимися вещами и оставшейся грузоподъемностью.
Если оставшаяся грузоподъемность равна 0 или нет больше вещей, мы добавляем текущий набор вещей в список допустимых наборов.
"""""

def find_backpack_combinations(items, max_weight):
    def backtrack(remaining_items, remaining_weight, current_items):
        if remaining_weight == 0 or not remaining_items:
            valid_combinations.append(current_items)
            return
        item, weight = remaining_items[0]
        if weight <= remaining_weight:
            backtrack(remaining_items[1:], remaining_weight - weight, current_items + [item])
        backtrack(remaining_items[1:], remaining_weight, current_items)

    valid_combinations = []
    items_list = list(items.items())
    backtrack(items_list, max_weight, [])
    return valid_combinations

items = {
    'water': 3,
    'food': 5,
    'tent': 10,
    'sleeping bag': 7,
    'first aid kit': 2
}

max_weight = 15

combinations = find_backpack_combinations(items, max_weight)
for combination in combinations:
    print(combination)
