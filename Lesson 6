#В модуль с проверкой даты добавьте возможность запуска в терминале с передачей даты на проверку.

from datetime import datetime

def chek_leap_year(date: str) -> bool:
    CHECK_NORMAL_1 = 4
    CHECK_NORMAL_2 = 100
    CHECK_NORMAL_3 = 400
    YEARS = range(1, 10000)
    year = int(date.split(".")[-1])
    if year in YEARS and year % CHECK_NORMAL_1 == 0 and year % CHECK_NORMAL_2 != 0 or year % CHECK_NORMAL_3 == 0:
        return True
    return False

def check_year(year: str) -> bool:
    try:
        _ = datetime.strptime(year, "%d.%m.%Y").date()
        return True
    except:
        return False


def date_validator(date: str) -> str:
    if check_year(date):
        return 'Високосный' if chek_leap_year(date) else 'Не является високосным'
    else:
        return f'Дата заполнена некорректно'

if __name__ == '__main__':
    date = input("Введите дату в формате ДД.ММ.ГГГГ: ")
    print(date_validator(date))


"""
Добавьте в пакет, созданный на семинаре шахматный модуль. 
Внутри него напишите код, решающий задачу о 8 ферзях. 
Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били друг друга. 
Вам дана расстановка 8 ферзей на доске, определите, есть ли среди них пара бьющих друг друга. 
Программа получает на вход восемь пар чисел, каждое число от 1 до 8 - координаты 8 ферзей. 
Если ферзи не бьют друг друга верните истину, а если бьют - ложь.
"""

def check_queens(queens):
    for i in range(len(queens)):
        for j in range(i + 1, len(queens)):
            # Проверяем, бьют ли ферзи друг друга
            if (queens[i][0] == queens[j][0] or  # Проверка горизонтали
                queens[i][1] == queens[j][1] or  # Проверка вертикали
                abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1])):  # Проверка диагонали
                return False
    return True

queens = [(1, 1), (2, 3), (3, 5), (4, 7), (5, 2), (6, 4), (7, 6), (8, 8)]

result = check_queens(queens)

if result:
    print("Ферзи не бьют друг друга")
else:
    print("Ферзи бьют друг друга")


"""
Напишите функцию в шахматный модуль. Используйте генератор случайных чисел для случайной расстановки ферзей в задаче выше. 
Проверяйте различный случайные варианты и выведите 4 успешных расстановки
"""

import random

def check_queens(queens):
    for i in range(len(queens)):
        for j in range(i + 1, len(queens)):
            if (queens[i][0] == queens[j][0] or
                queens[i][1] == queens[j][1] or
                abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1])):
                return False
    return True

def generate_queens_placements():
    successful_placements = []
    while len(successful_placements) < 4:
        queens = random.sample(range(1, 9), 8)
        placements = [(queens[i], i + 1) for i in range(8)]
        if check_queens(placements):
            successful_placements.append(placements)
    return successful_placements

# Генерируем и проверяем 4 успешные расстановки ферзей
placements = generate_queens_placements()

# Выводим успешные расстановки
for i, queens in enumerate(placements):
    print(f"Расстановка {i+1}:")
    for queen in queens:
        print(queen)
    print()




