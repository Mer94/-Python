# Напишите следующие функции:
# Нахождение корней квадратного уравнения


import csv
import json
import math

# Нахождение корней квадратного уравнения
def solve_quadratic_equation(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant > 0:
        x1 = (-b + math.sqrt(discriminant)) / (2*a)
        x2 = (-b - math.sqrt(discriminant)) / (2*a)
        return x1, x2
    elif discriminant == 0:
        x = -b / (2*a)
        return x
    else:
        return None

# Генерация csv файла с тремя случайными числами в каждой строке. 100-1000 строк.

def generate_csv_file(file_path, num_rows):
    with open(file_path, "w", newline="") as file:
        writer = csv.writer(file)
        for _ in range(num_rows):
            row = [random.randint(1, 1000) for _ in range(3)]
            writer.writerow(row)

# Декоратор, запускающий функцию нахождения корней квадратного уравнения с каждой тройкой чисел из csv файла.

def solve_quadratic_equation_for_csv(func):
    def wrapper(file_path):
        with open(file_path, "r") as file:
            reader = csv.reader(file)
            for row in reader:
                a, b, c = map(int, row)
                result = func(a, b, c)
                print(f"Equation: {a}x^2 + {b}x + {c}")
                print("Roots:", result)
                print()
    return wrapper

# Декоратор, сохраняющий переданные параметры и результаты работы функции в json файл.
def save_results_to_json(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        data = {
            "args": args,
            "kwargs": kwargs,
            "result": result
        }
        with open("results.json", "w") as file:
            json.dump(data, file, indent=4)
    return wrapper
